<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Guillem Fernandez]]></title>
  <link href="http://guillemf.github.io/atom.xml" rel="self"/>
  <link href="http://guillemf.github.io/"/>
  <updated>2016-09-14T15:34:13+02:00</updated>
  <id>http://guillemf.github.io/</id>
  <author>
    <name><![CDATA[Guillem Fernandez]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What Is the Status of BDD in Swift]]></title>
    <link href="http://guillemf.github.io/blog/2016/09/08/what-is-the-status-of-bdd-in-swift/"/>
    <updated>2016-09-08T17:31:12+02:00</updated>
    <id>http://guillemf.github.io/blog/2016/09/08/what-is-the-status-of-bdd-in-swift</id>
    <content type="html"><![CDATA[<p>Again woking on a project with a heavy load on BDD.</p>

<p>In this case we had a greenfield project in front of us, as nothing done regarding automation was usable here. Obviously my advice was to opt for a Calabash based solution as I believe it&rsquo;s a great, &lsquo;standardised&rsquo; and long term solution.</p>

<p>Calabash is a cucumber based solution that works pretty well with iOS. Of corse you find some problems, the main one is that is an intrusive solution based on the inclusion of an http server. That server allows the communication between the cucumber Gem and the iOS app, to access to the UI elements and perform the different actions on it. That brings the problem of being dependent on the system.</p>

<p>With Swift calabash still works, but with the new UI Testing framework a new solution appears.</p>

<p>Up to now I didn&rsquo;t dive into the nitty-gritties of the tool and to do it, there is no better way than creating an app.</p>

<p>It&rsquo;s going to be a simple app that will only allow you to make some voice records on your iPhone, I could call it YAMVR, but probably I will go for something more glamourous.</p>

<p>So stay tunned and send any comment you have if you want me to check something special or add any feature to the app.</p>

<p>Thanks for reading me and don&rsquo;t forget to follow me on twitter and check my repos in github.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MFMailComposeViewController Nightmare]]></title>
    <link href="http://guillemf.github.io/blog/2015/01/23/mfmailcomposeviewcontroller-nightmare/"/>
    <updated>2015-01-23T10:30:03+01:00</updated>
    <id>http://guillemf.github.io/blog/2015/01/23/mfmailcomposeviewcontroller-nightmare</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just gone through MFMailComposeViewController because I had a problem with the look&amp;feel of the Cancel and Save buttons on the mail compose dialog toolbar. They just looked too, how to say, transparent. The problem was that in the app I am working on I use appearance proxy. That seemed not to work with MFMailComposeViewController.</p>

<!-- more -->


<p>My first approach was to change those behavior that didn&rsquo;t fit in my needs. And the result was &hellip; nothing. It&rsquo;s like that doesn&rsquo;t apply to it if you are using a global setting. You can find many solutions thought the internet telling you to user setTintColor on the MFMailComposeViewController object you&rsquo;ve just created, and they will work if you don&rsquo;t use the appearance proxy at some point of your app initialization like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="p">[[</span><span class="bp">UIBarButtonItem</span> <span class="nl">appearanceWhenContainedIn</span><span class="p">:[</span><span class="bp">UINavigationBar</span> <span class="k">class</span><span class="p">],</span> <span class="nb">nil</span><span class="p">]</span> <span class="nl">setTitleTextAttributes</span><span class="p">:</span><span class="n">buttonAttributes</span> <span class="nl">forState</span><span class="p">:</span><span class="n">UIControlStateNormal</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[[</span><span class="bp">UINavigationBar</span> <span class="n">appearance</span><span class="p">]</span> <span class="nl">setTintColor</span><span class="p">:[</span><span class="bp">UIColor</span> <span class="n">redColor</span><span class="p">]];</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>If you did it, forget about using:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="p">[</span><span class="n">mailViewController</span><span class="p">.</span><span class="n">navigationBar</span> <span class="nl">setTintColor</span><span class="p">:[</span><span class="bp">UIColor</span> <span class="n">redColor</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span> <span class="nl">presentViewController</span><span class="p">:</span><span class="n">mailViewController</span> <span class="nl">animated</span><span class="p">:</span><span class="nb">YES</span> <span class="nl">completion</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>The result is going to be the same nothing I had.</p>

<p>But the good new is that there is a solution. I know it&rsquo;s not the most elegant one but it works and you can save a lot of time investigating that I already invested. The solution is to change the global setting in the appearance proxy to match what you need and set it back to the original behavior when the dialog is dismissed.</p>

<p>As you know there is not going to be any dialog with navigation bar while the mail composer is present, it is safe to change it. To revert the changes, you need to do it in <em>- (void)mailComposeController:(MFMailComposeViewController<em>)controller didFinishWithResult:(MFMailComposeResult)result error:(NSError</em>)error</em>. I use a singleton to contain the configuration colors I need to restore the original look&amp;feel, if you don&rsquo;t have it, you need to implement a mechanism to do it or you&rsquo;ll have a coupled and dependent code.</p>

<p>Thanks for reading and don&rsquo;t forget to share and follow me in twitter @guillemfg.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 7 and iOS 8 Living Together]]></title>
    <link href="http://guillemf.github.io/blog/2015/01/20/ios-7-and-ios-8-living-together/"/>
    <updated>2015-01-20T19:02:10+01:00</updated>
    <id>http://guillemf.github.io/blog/2015/01/20/ios-7-and-ios-8-living-together</id>
    <content type="html"><![CDATA[<p>This is the first post of 2015. I want to start it with a new category, Tips and Tricks. I&rsquo;ve found that in my daily work I am fixing many different small pieces of code that, in some cases, will be interesting for you, so I decided to share it in my blog.</p>

<p>The firs one is how to include code that behaves differently when it&rsquo;s running on iOS 7 than when it&rsquo;s running on iOS 8, for example. I&rsquo;ve found two main different ways to do it.</p>

<!-- more -->


<h2>Check the responsiveness to a selector.</h2>

<p>Most of the times, the problem comes because of a change in the signature of an API or the deprecation of the methods. In this case the easiest way is to check if the object responds to the given selector. Two examples are NSOperation and UIApplication.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="bp">NSOperation</span> <span class="o">*</span><span class="n">myOperation</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSOperation</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">myOperation</span> <span class="nl">respondsToSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">setName</span><span class="p">)])</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// iOS 8 specific code</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// iOS 7 speficic code</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="bp">UIApplication</span> <span class="o">*</span><span class="n">app</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIApplication</span> <span class="n">sharedApplication</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">app</span> <span class="nl">respondsToSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">registerForRemoteNotifications</span><span class="p">)])</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// iOS 8 specific code</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// iOS 7 speficic code</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Check the value of <em>NSFundationVersionNumber</em></h2>

<p>The second option is using <em>NSFundationVersionNumber</em>. This option gives you the flexibility to behave differently not because of any restriction, but because functional requirements or just because you like it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">floor</span><span class="p">(</span><span class="n">NSFoundationVersionNumber</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">NSFoundationVersionNumber_iOS_7_0</span><span class="p">){</span>
</span><span class='line'>        <span class="c1">// iOS 7.0 specific code</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">floor</span><span class="p">(</span><span class="n">NSFoundationVersionNumber</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">NSFoundationVersionNumber_iOS_7_1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// iOS 7.1 specific code</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// iOS 8.X specific code</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can use the defined constants:</p>

<ul>
<li>NSFoundationVersionNumber_iPhoneOS_2_0</li>
<li>NSFoundationVersionNumber_iPhoneOS_2_1</li>
<li>NSFoundationVersionNumber_iPhoneOS_2_2</li>
<li>NSFoundationVersionNumber_iPhoneOS_3_0</li>
<li>NSFoundationVersionNumber_iPhoneOS_3_1</li>
<li>NSFoundationVersionNumber_iPhoneOS_3_2</li>
<li>NSFoundationVersionNumber_iOS_4_0</li>
<li>NSFoundationVersionNumber_iOS_4_1</li>
<li>NSFoundationVersionNumber_iOS_4_2</li>
<li>NSFoundationVersionNumber_iOS_4_3</li>
<li>NSFoundationVersionNumber_iOS_5_0</li>
<li>NSFoundationVersionNumber_iOS_5_1</li>
<li>NSFoundationVersionNumber_iOS_6_0</li>
<li>NSFoundationVersionNumber_iOS_6_1</li>
<li>NSFoundationVersionNumber_iOS_7_0</li>
<li>NSFoundationVersionNumber_iOS_7_1</li>
</ul>


<p>Also OS X has its own ones.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BDD - Mastermind : Adding Calabash and Creating Our First Tests]]></title>
    <link href="http://guillemf.github.io/blog/2014/11/20/bdd-mastermind-adding-calabash-and-creating-our-first-tests/"/>
    <updated>2014-11-20T20:06:16+01:00</updated>
    <id>http://guillemf.github.io/blog/2014/11/20/bdd-mastermind-adding-calabash-and-creating-our-first-tests</id>
    <content type="html"><![CDATA[<p>This is the sixth post to create an application using BDD and TDD in iOS. If you missed the previous post, my recommendation is that you read it first <a href="http://guillemf.github.io/blog/2014/11/10/bdd-mastermind-view-preparation/" title="BDD - Mastermind : View preparation">here</a>. If you just landed, better start on the <a href="http://guillemf.github.io/blog/2014/08/20/bdd-from-the-idea-to-the-app-2/" title="BDD: From the Idea to the App 2">first</a></p>

<p>In this post is where we really start doing BDD, so get ready to enter to the new and exciting world of cucumber and behaviour driven development.</p>

<!-- more -->


<h1>Cucumber, What is it and How to use</h1>

<p>In previous post I&rsquo;ve introduced the concept of cucumber, and in this post we are going to start with it. But first I&rsquo;d like to give you a brief introduction about cucumber and what is it.</p>

<p>Cucumber is an set of tools that allows us to write tests in &ldquo;<em>natural language</em>&rdquo; that are readable by the computer and tell it what to test and how to test. Notice that I&rsquo;ve written &ldquo;<em>natural language</em>&rdquo; between quotes and in italics. That is because we should make a couple precissions here. First, the language is natural because it can be read as a natural language written story, but is not so natural in the sense that we can&rsquo;t write it as it comes, but we have to follow some conventions that describe the gherkin syntax. Second, the test, as said before, are not going to work out of the box. Eventhough there are some steps that work with no additional effort, most of the steps will need a definition from your side.</p>

<p>You could say - &ldquo;<em>what&rsquo;s the point in writting the tests if we have to do another development job behind?</em>&rdquo;</p>

<p>Well, the advantage you get from this is the ability to have clearer tests that can be mantained with lot less effort and that can be written, read and maintained by third party and non technical people.</p>

<h1>Back to school, let&rsquo;s learn some syntax</h1>

<p>A good definition of what is gerkhin is in <a href="https://pragprog.com/book/hwcuc/the-cucumber-book" title="The Pragmatic Bookshelf">The Cucumber Book: Behaviour-Driven Development for Testes and Developers</a>, an excellent book that I highly recomend you to read if you want to be a &ldquo;<em>Cucumber Master</em>&rdquo;.</p>

<blockquote><p>&ldquo;<em>Gherkin gives us a lightweight structure for documenting examples of the behavior our stakeholders want, in a way that it can be easily understood both by the stakeholders and by Cucumber.</em>&rdquo;</p></blockquote>

<p>Let&rsquo;s see an example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='gherkin'><span class='line'><span class="k">Feature:</span><span class="nf"> Board behaviour</span>
</span><span class='line'><span class="nf">  As a Player</span>
</span><span class='line'><span class="nf">  I want to see how the cells react to my taps as expected</span>
</span><span class='line'><span class="nf">  So I can begin playing</span>
</span><span class='line'>
</span><span class='line'><span class="k">Scenario:</span><span class="nf"> Initial situation</span>
</span><span class='line'><span class="k">  Given </span><span class="nf">I am on the Initial Screen</span>
</span><span class='line'><span class="nf">  </span><span class="k">Then </span><span class="nf">a new game should be ready</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see this peace of code is written in a way anyone could understand, well, anyone who speaks english. What about a non english speaker stake holder? Well, gherkin syntax can be written in 40 different languages. You can see a list of available languages by running cucumber gem as &lsquo;<em>cucumber &ndash;i18n help</em>&rsquo; and you&rsquo;ll be listed all available languages. At this moment, this is what my system shows.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='vctreestatus'><span class='line'>      | ar        | Arabic              | العربية           |
</span><span class='line'>      | bg        | Bulgarian           | български         |
</span><span class='line'>      | bm        | Malay               | Bahasa Melayu     |
</span><span class='line'>      | ca        | Catalan             | català            |
</span><span class='line'>      | cs        | Czech               | Česky             |
</span><span class='line'>      | cy-GB     | Welsh               | Cymraeg           |
</span><span class='line'>      | da        | Danish              | dansk             |
</span><span class='line'>      | de        | German              | Deutsch           |
</span><span class='line'>      | el        | Greek               | Ελληνικά          |
</span><span class='line'>      | en        | English             | English           |
</span><span class='line'>      | en-Scouse | Scouse              | Scouse            |
</span><span class='line'>      | en-au     | Australian          | Australian        |
</span><span class='line'>      | en-lol    | LOLCAT              | LOLCAT            |
</span><span class='line'>      | en-old    | Old English         | Englisc           |
</span><span class='line'>      | en-pirate | Pirate              | Pirate            |
</span><span class='line'>      | en-tx     | Texan               | Texan             |
</span><span class='line'>      | eo        | Esperanto           | Esperanto         |
</span><span class='line'>      | es        | Spanish             | español           |
</span><span class='line'>      | et        | Estonian            | eesti keel        |
</span><span class='line'>      | fa        | Persian             | فارسی             |
</span><span class='line'>      | fi        | Finnish             | suomi             |
</span><span class='line'>      | fr        | French              | français          |
</span><span class='line'>      | gl        | Galician            | galego            |
</span><span class='line'>      | he        | Hebrew              | עברית             |
</span><span class='line'>      | hi        | Hindi               | हिंदी               |
</span><span class='line'>      | hr        | Croatian            | hrvatski          |
</span><span class='line'>      | hu        | Hungarian           | magyar            |
</span><span class='line'>      | id        | Indonesian          | Bahasa Indonesia  |
</span><span class='line'>      | is        | Icelandic           | Íslenska          |
</span><span class='line'>      | it        | Italian             | italiano          |
</span><span class='line'>      | ja        | Japanese            | 日本語             |
</span><span class='line'>      | kn        | Kannada             | ಕನ್ನಡ              |
</span><span class='line'>      | ko        | Korean              | 한국어             |
</span><span class='line'>      | lt        | Lithuanian          | lietuvių kalba    |
</span><span class='line'>      | lu        | Luxemburgish        | Lëtzebuergesch    |
</span><span class='line'>      | lv        | Latvian             | latviešu          |
</span><span class='line'>      | nl        | Dutch               | Nederlands        |
</span><span class='line'>      | no        | Norwegian           | norsk             |
</span><span class='line'>      | pa        | Panjabi             | ਪੰਜਾਬੀ              |
</span><span class='line'>      | pl        | Polish              | polski            |
</span><span class='line'>      | pt        | Portuguese          | português         |
</span><span class='line'>      | ro        | Romanian            | română            |
</span><span class='line'>      | ru        | Russian             | русский           |
</span><span class='line'>      | sk        | Slovak              | Slovensky         |
</span><span class='line'>      | sr-Cyrl   | Serbian             | Српски            |
</span><span class='line'>      | sr-Latn   | Serbian (Latin)     | Srpski (Latinica) |
</span><span class='line'>      | sv        | Swedish             | Svenska           |
</span><span class='line'>      | th        | Thai                | ไทย               |
</span><span class='line'>      | tl        | Telugu              | తెలుగు             |
</span><span class='line'>      | tr        | Turkish             | Türkçe            |
</span><span class='line'>      | tt        | Tatar               | Татарча           |
</span><span class='line'>      | uk        | Ukrainian           | Українська        |
</span><span class='line'>      | uz        | Uzbek               | Узбекча           |
</span><span class='line'>      | vi        | Vietnamese          | Tiếng Việt        |
</span><span class='line'>      | zh-CN     | Chinese simplified  | 简体中文           |
</span><span class='line'>      | zh-TW     | Chinese traditional | 繁體中文           |
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>So we could write the same peace of code we wrote before as.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='gherkin'><span class='line'><span class="k">Característica:</span><span class="nf"> Comportamiento del Tablero</span>
</span><span class='line'><span class="nf">  Como jugador</span>
</span><span class='line'><span class="nf">  Quiero saber como reaccionan las celdas a mis pulsaciones tal como esper</span>
</span><span class='line'><span class="nf">  y así poder empezar a jugar</span>
</span><span class='line'>
</span><span class='line'><span class="k">Escenario:</span><span class="nf"> Situación inicial</span>
</span><span class='line'><span class="k">  Dado </span><span class="nf">que estoy en la pantalla inicial</span>
</span><span class='line'><span class="nf">  </span><span class="k">Entonces </span><span class="nf">un nuevo juego debería estar listo</span>
</span></code></pre></td></tr></table></div></figure>


<p>And cucumber should be able to proceed the same way as when it was written in english. Of course the steps definitions won&rsquo;t be called the same or will do any translation, but we can map them.</p>

<p>Gherkin is basically a set of keywords organised in a certain way and followed by sentences that might or might not contain parameters and have to be defined as steps.</p>

<p>The keywords used by gherkin are:</p>

<ul>
<li>First level

<ul>
<li>Feature</li>
<li>Background</li>
<li>Scenario</li>
</ul>
</li>
<li>Second level

<ul>
<li>Given</li>
<li>When</li>
<li>Then</li>
<li>And</li>
<li>But</li>
<li>*</li>
<li>Scenario Outline</li>
<li>Examples</li>
</ul>
</li>
</ul>


<p>First level keywords are used to separate different tests and group them, while the second level ones are to define each step or provide data to test on. I won&rsquo;t go deeper on this as it is not the purpose of this port serie. As I commented before, if you really want to get more information go and buy the book <a href="https://pragprog.com/book/hwcuc/the-cucumber-book" title="The Pragmatic Bookshelf">The Cucumber Book: Behaviour-Driven Development for Testes and Developers</a>, it&rsquo;s at the high level Pragmatic Programmers always offer.</p>

<h1>Talk is cheap. Show me the code</h1>

<p>It all looks very nice, but, does it work? And how does that work?</p>

<p>Well, let&rsquo;s start by writting our first feature.</p>

<p>If you remember a previous post in this series called <a href="http://guillemf.github.io/blog/2014/09/25/bdd-mastermind-internal-design/" title="Previous post reference">BDD - Mastermind : Internal Design</a>, I defined there the acceptance criterias the way a stakeholder would define them ( more or less, that&rsquo;s my humble contribution ). Let&rsquo;s bring it back to write a couple of them in gherkin.</p>

<ul>
<li>The screen should contain nine rows and five columns.</li>
<li>The left most column has to be gray.</li>
<li>The other five columns has to be white.</li>
<li>When I first open the app, a new game should be ready.</li>
<li>When a new game starts, the screen should contain no colors and no results.</li>
</ul>


<p>As you can imagine there are many ways to write those acceptance criterias in gherkin. The one I choosed is the following one.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='gherkin'><span class='line'><span class="k">Scenario:</span><span class="nf"> Initial situation</span>
</span><span class='line'><span class="k">  Given </span><span class="nf">I am on the Initial Screen</span>
</span><span class='line'><span class="nf">  </span><span class="k">Then </span><span class="nf">a new game should be ready</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you might deduct, the step &ldquo;<em>Given I am on the Initial Screen</em>&rdquo; includes</p>

<ul>
<li>The screen should contain nine rows and five columns.</li>
<li>The left most column has to be gray.</li>
<li>The other five columns has to be white.</li>
</ul>


<p>There are, at least, two ways we can do it. Creating one step for each condition and then putting them all together in a single step called &ldquo;Given I am on the Initial Screen&rdquo; or creating all steps into the &ldquo;Given I am on the Initial Screen&rdquo;.</p>

<p>I decided to go this second way, but it would be a good practice if you try to do it the other way and see how it works the same way or even better.</p>

<p>So let&rsquo;s dive into the definition of the steps.</p>

<p>First of all, go to your project folder, be sure you are in the same folder as your .xcproject and then run</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vctreestatus'><span class='line'>$ gem install calabash-cucumber
</span><span class='line'>
</span><span class='line'>$ calabash-ios setup
</span><span class='line'>Checking if Xcode is running...
</span></code></pre></td></tr></table></div></figure>


<p>When it is finished, open the new created .xcworkspace file and build the new target you have ending in -cal . You need to do it because cucumber needs a binary to run the tests on, otherwise you are going to start having complains from cucumber.</p>

<p>In the project folder you&rsquo;ll see a new folder called features, that&rsquo;s where all cucumber magic lives.</p>

<p>When you open the .feature file and replace the default feature for your new feature and you run cucumber, this is what you are going to see:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='vctreestatus'><span class='line'>╰─$ DEVICE_TARGET=&#39;iPhone 6 (8.1 Simulator)&#39; cucumber
</span><span class='line'>Feature: Board behaviour
</span><span class='line'>  As a Player
</span><span class='line'>  I want to see how the cells react to my taps as expected
</span><span class='line'>  So I can begin playing
</span><span class='line'>
</span><span class='line'>  Scenario: Initial situation        # features/start.feature:6
</span><span class='line'>    Given I am on the Initial Screen # features/start.feature:7
</span><span class='line'>    Then a new game should be ready  # features/start.feature:8
</span><span class='line'>
</span><span class='line'>1 scenario (1 undefined)
</span><span class='line'>2 steps (2 undefined)
</span><span class='line'>0m15.800s
</span><span class='line'>
</span><span class='line'>You can implement step definitions for undefined steps with these snippets:
</span><span class='line'>
</span><span class='line'>Given(/^I am on the Initial Screen$/) do
</span><span class='line'>  pending # express the regexp above with the code you wish you had
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>Then(/^a new game should be ready$/) do
</span><span class='line'>  pending # express the regexp above with the code you wish you had
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Note that the command used to run the test &lsquo;<em>DEVICE_TARGET=&#8217;iPhone 6 (8.1 Simulator)&rsquo; cucumber</em>&lsquo;. Please take a look at <a href="https://github.com/calabash/calabash-ios/wiki" title="Documentation fo Calabash">calabash documentation</a> for more options.</p></blockquote>

<p>You can see how cucumber helps us.</p>

<blockquote><p>You can implement step definitions for undefined steps with these snippets:</p>

<p>Given(/^I am on the Initial Screen$/) do
  pending # express the regexp above with the code you wish you had
end</p>

<p>Then(/^a new game should be ready$/) do
  pending # express the regexp above with the code you wish you had
end</p></blockquote>

<p>Those are the steps you need to implement inside your features/step_definitions/mastermind_steps.rb file. Let&rsquo;s take a look on how I&rsquo;ve defined them.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span> <span class="sr">/^I am on the Initial Screen$/</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># The screen should contain nine rows and five columns</span>
</span><span class='line'>  <span class="n">rows</span> <span class="o">=</span> <span class="n">query</span><span class="p">(</span><span class="s2">&quot;view {accessibilityLabel BEGINSWITH &#39;Combination Row&#39;}&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">fail</span><span class="p">(</span><span class="s2">&quot;The screen should contain nine rows&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">rows</span><span class="o">.</span><span class="n">count</span> <span class="o">!=</span> <span class="mi">9</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Following the mock, those rows have to be as wide as the screen</span>
</span><span class='line'>  <span class="n">window</span> <span class="o">=</span> <span class="n">query</span><span class="p">(</span><span class="s2">&quot;window&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rows</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">row</span><span class="o">[</span><span class="s2">&quot;frame&quot;</span><span class="o">][</span><span class="s2">&quot;width&quot;</span><span class="o">]</span> <span class="o">!=</span> <span class="n">window</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="s2">&quot;frame&quot;</span><span class="o">][</span><span class="s2">&quot;width&quot;</span><span class="o">]</span>
</span><span class='line'>       <span class="nb">fail</span><span class="p">(</span><span class="s2">&quot;All rows have to be as wide as the screen&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># Following the mock, the rows have distributed along the screen  </span>
</span><span class='line'>  <span class="n">lastFloor</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">rows</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">row</span><span class="o">[</span><span class="s2">&quot;frame&quot;</span><span class="o">][</span><span class="s2">&quot;y&quot;</span><span class="o">]</span> <span class="o">!=</span> <span class="n">lastFloor</span>
</span><span class='line'>       <span class="nb">fail</span><span class="p">(</span><span class="s2">&quot;Each row has to be after the previous one, expecting </span><span class="si">#{</span><span class="n">lastFloor</span><span class="si">}</span><span class="s2">, </span><span class="si">#{</span><span class="n">row</span><span class="o">[</span><span class="s2">&quot;frame&quot;</span><span class="o">][</span><span class="s2">&quot;y&quot;</span><span class="o">]</span><span class="si">}</span><span class="s2"> found&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">fail</span><span class="p">(</span><span class="s2">&quot;All rows should be higher than zero&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">row</span><span class="o">[</span><span class="s2">&quot;frame&quot;</span><span class="o">][</span><span class="s2">&quot;height&quot;</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">lastFloor</span> <span class="o">=</span> <span class="n">row</span><span class="o">[</span><span class="s2">&quot;frame&quot;</span><span class="o">][</span><span class="s2">&quot;y&quot;</span><span class="o">]</span> <span class="o">+</span> <span class="n">row</span><span class="o">[</span><span class="s2">&quot;frame&quot;</span><span class="o">][</span><span class="s2">&quot;height&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># All rows are combination</span>
</span><span class='line'>  <span class="n">rows</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">fail</span><span class="p">(</span><span class="s2">&quot;All rows must be combination rows but </span><span class="si">#{</span><span class="n">row</span><span class="o">[</span><span class="s2">&quot;class&quot;</span><span class="o">]</span><span class="si">}</span><span class="s2"> was found&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">row</span><span class="o">[</span><span class="s2">&quot;class&quot;</span><span class="o">]</span> <span class="o">!=</span> <span class="s2">&quot;MMCombinationRow&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">sleep</span><span class="p">(</span><span class="no">STEP_PAUSE</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Then</span><span class="p">(</span><span class="sr">/^a new game should be ready$/</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">rows</span> <span class="o">=</span> <span class="n">query</span><span class="p">(</span><span class="s2">&quot;view {accessibilityLabel BEGINSWITH &#39;Combination Row&#39;}&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">rows</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">combination</span> <span class="o">=</span> <span class="n">row</span><span class="o">[</span><span class="s2">&quot;label&quot;</span><span class="o">][</span><span class="mi">18</span><span class="o">.</span><span class="n">.</span><span class="mi">23</span><span class="o">]</span>
</span><span class='line'>    <span class="nb">fail</span><span class="p">(</span><span class="s2">&quot;All rows combinations must be empty but </span><span class="si">#{</span><span class="n">combination</span><span class="si">}</span><span class="s2"> was found&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">combination</span> <span class="o">!=</span> <span class="s2">&quot;&#39;    &#39;&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>To match one buy one the acceptance criterias with the steps let&rsquo;s split it.</p>

<ul>
<li>The screen should contain nine rows and five columns.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># The screen should contain nine rows and five columns</span>
</span><span class='line'>  <span class="n">rows</span> <span class="o">=</span> <span class="n">query</span><span class="p">(</span><span class="s2">&quot;view {accessibilityLabel BEGINSWITH &#39;Combination Row&#39;}&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">fail</span><span class="p">(</span><span class="s2">&quot;The screen should contain nine rows&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">rows</span><span class="o">.</span><span class="n">count</span> <span class="o">!=</span> <span class="mi">9</span>
</span></code></pre></td></tr></table></div></figure>


<p>Previoulsy to this step, you can find a new class in the code called <em>MMCombinationRow</em> that has been created with TDD and ensures containing five cells, one result cell and four color cells. So what&rsquo;s missing here is the number of rows.</p>

<p>Another way to implement this check is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># The screen should contain nine rows and five columns</span>
</span><span class='line'>  <span class="n">rows</span> <span class="o">=</span> <span class="n">query</span><span class="p">(</span><span class="s2">&quot;MMCombinationRow&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">fail</span><span class="p">(</span><span class="s2">&quot;The screen should contain nine rows&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">rows</span><span class="o">.</span><span class="n">count</span> <span class="o">!=</span> <span class="mi">9</span>
</span></code></pre></td></tr></table></div></figure>


<p>Go and implement the rest and see how it fails and what have you got to change to make it pass and then go and run the unit tests to ensure you didn&rsquo;t break anything.</p>

<p>If all goes fine, just making a <em>git checkout</em> of <a href="https://github.com/guillemf/Mastermind-BDD/tree/Step_7" title="MasterMind-BDD Step7">Step 7</a> and you should see something like this:</p>

<div class="embed-video-container"><iframe src="//www.youtube.com/embed/RYihMe_5yws" allowfullscreen></iframe></div>


<p>Remember you can find the code of this post in <a href="https://github.com/guillemf/Mastermind-BDD/tree/Step_8" title="MasterMind-BDD Step5">this commit, Step 8</a>.</p>

<p>If you like it, please share! Thank you for reading me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BDD - Mastermind : View Preparation]]></title>
    <link href="http://guillemf.github.io/blog/2014/11/10/bdd-mastermind-view-preparation/"/>
    <updated>2014-11-10T13:25:00+01:00</updated>
    <id>http://guillemf.github.io/blog/2014/11/10/bdd-mastermind-view-preparation</id>
    <content type="html"><![CDATA[<p>This is the fifth post to create an application using BDD and TDD in iOS. If you missed the previous post, my recommendation is that you read it first <a href="http://guillemf.github.io/blog/2014/10/21/bdd-mastermind-view-preparation-to-make-the-ui-testable/" title="BDD - Mastermind : View preparation to make the UI testable">here</a>.</p>

<p>In the previous post I went through a way to test the visible result of the custom view in a very intuitive way. It was just an exercise to test how, in a simple way, we could have a complete test of how we expect our view looks like. The truth is that this is a feeble method as it depends on an image that might or might not be 100% achievable by the tools we can make use of.</p>

<p>The purpose of the previous post was to introduce the technique we are going to use in this post. We are going to go through a technique that allows us to test the final behavior in a more secure and maintainable way.</p>

<p>You can find the code corresponding to this post in <a href="https://github.com/guillemf/Mastermind-BDD/tree/Step_6" title="MasterMind-BDD Step6">this commit</a>. Go and get it!</p>

<!-- more -->


<h1>The result cells</h1>

<p><img class="left" src="https://farm3.staticflickr.com/2941/15101651020_46fb32d967_o.jpg" width="190" height="490" title="Mastermind Sketch With zones" alt="Mastermind board Sketch with zones"></p>

<p>The second element we have on the screen is the results cell. If you remember from the first post of the series, we defined three areas to consider. Area number three is a special kind of view that provides different visual aspects depending on the result we are providing. The rules are described in the second post of the series <a href="http://guillemf.github.io/blog/2014/09/25/bdd-mastermind-internal-design/" title="BDD - Mastermind : Internal design">BDD - Mastermind : Internal design</a>, but we need add a few more &ldquo;conditions&rdquo; to have a really robust view that does what we want it to do.</p>

<p><strong>First</strong> - We are only accepting two different symbols, no matter which symbols but just two different.<br>
<strong>Second</strong> - If the first symbol is a space, then it is considered there are no symbols of the first type and all the symbols are considered second kind.<br>
<strong>Third</strong> - As there is no specification, the circles will try to fill as much space as possible. One symbol will end in a single big circle.</p>

<p>With this in mind we have enough information to start creating the tests to implement the result cell.</p>

<h1>Test and implementation</h1>

<p>A very common practice is to create helper methods to simplify the test and provide more clarity. In this case we need to create a combination generator, so I implement this random combination generators.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// Helper Methods</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">generateRandomCharString</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Available symbols</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">symbols</span> <span class="o">=</span> <span class="s">@&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Pick a random index to extract two symbols</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">symbolIndex</span> <span class="o">=</span> <span class="n">arc4random_uniform</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">symbols</span><span class="p">.</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Obtain the two random symbols</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">symbol</span> <span class="o">=</span> <span class="p">[</span><span class="n">symbols</span> <span class="nl">substringWithRange</span><span class="p">:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="n">symbolIndex</span><span class="p">,</span> <span class="mi">1</span><span class="p">)];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Obtain random number of each symbols</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">arc4random_uniform</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSMutableString</span> <span class="o">*</span><span class="n">resultString</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableString</span> <span class="nl">stringWithString</span><span class="p">:</span><span class="s">@&quot;&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">n</span><span class="o">&lt;</span><span class="n">length</span><span class="p">;</span> <span class="n">n</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">[</span><span class="n">resultString</span> <span class="nl">appendString</span><span class="p">:</span><span class="n">symbol</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">resultString</span> <span class="k">copy</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">generateRandomResult</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSMutableString</span> <span class="o">*</span><span class="n">resultString</span> <span class="o">=</span> <span class="p">[[</span><span class="nb">self</span> <span class="n">generateRandomCharString</span><span class="p">]</span> <span class="n">mutableCopy</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[</span><span class="n">resultString</span> <span class="nl">stringByAppendingString</span><span class="p">:[</span><span class="nb">self</span> <span class="n">generateRandomCharString</span><span class="p">]]</span> <span class="k">copy</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSData</span> <span class="o">*</span><span class="p">)</span><span class="nf">dataForCellPNGRepresentationForView:</span><span class="p">(</span><span class="bp">UIView</span> <span class="o">*</span><span class="p">)</span><span class="nv">view</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UIGraphicsBeginImageContext</span><span class="p">(</span><span class="n">view</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="n">view</span><span class="p">.</span><span class="n">layer</span> <span class="nl">renderInContext</span><span class="p">:</span><span class="n">UIGraphicsGetCurrentContext</span><span class="p">()];</span>
</span><span class='line'>    <span class="bp">UIImage</span><span class="o">*</span> <span class="n">image1</span> <span class="o">=</span> <span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">();</span>
</span><span class='line'>    <span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">UIImagePNGRepresentation</span><span class="p">(</span><span class="n">image1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>generateRandomCharString</strong> - Is used to generate a string of random lenght of a random symbol. As you can see I previously have defined the array of valid symbols which contain no space. A good practice would be to add a test to check that any symbol placed is included in the set of valid symbols.</li>
<li><strong>generateRandomResult</strong> - Is the method used to create a combination of two symbols.</li>
<li><strong>dataForCellPNGRepresentationForView</strong> - Is the method used to obtain a png representation of the view. That is the way we can compare two views at visual level.</li>
</ul>


<p>Now that we have all we need, let&rsquo;s write some tests. I won&rsquo;t go though each test as they are trivial, just list them.</p>

<ul>
<li>Test that on init the background is transparent.</li>
<li>Test that on init the combination value is empty.</li>
<li>Test that when the combination changes bezier path changes.</li>
<li>Test that when the combination is empty bezier paths contains zero circles.</li>
<li>Test that when the combination changes bezier paths contains the same number of circles as the length of the combination.</li>
<li>Test that when the combination has more than two different symbols only first two are stored.</li>
<li>Test that when the combination changes bezier paths contains only bezier paths;</li>
</ul>


<h1>The final method for testing the visual result</h1>

<p>As I commented before, testing against images has some important limitations like depending on the device implementation, small changes makes the test fail, etc &hellip; So, which is the best way to do it? Well nothing better than comparing a view with another view. That way we can be sure there is no difference and we can update easily the implementation.</p>

<p>To do it, you just need to create a view that looks like what you expect your view to look like.</p>

<p>You might think, that is duplicating the effort.</p>

<p>Well, create a dummy view that just does one thing is not duplicating the effort, is prototyping what you expect to obtain and also lets you define some rules that you might translate to your view.</p>

<p>Let&rsquo;s take a look at the dummy view I&rsquo;ve implemented and you&rsquo;ll understand better what I mean.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// Dummy view to draw the image we expect</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">DummyView</span> : <span class="bp">UIView</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">combination</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">UIColor</span> <span class="o">*</span><span class="n">color</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">DummyView</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithFrame:</span><span class="p">(</span><span class="bp">CGRect</span><span class="p">)</span><span class="nv">frame</span> <span class="nf">combination:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">combination</span> <span class="nf">color:</span><span class="p">(</span><span class="bp">UIColor</span> <span class="o">*</span><span class="p">)</span><span class="nv">color</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="nl">initWithFrame</span><span class="p">:</span><span class="n">frame</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">combination</span> <span class="o">=</span> <span class="n">combination</span><span class="p">;</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">color</span> <span class="o">=</span> <span class="n">color</span><span class="p">;</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">clearColor</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">drawRect:</span><span class="p">(</span><span class="bp">CGRect</span><span class="p">)</span><span class="nv">rect</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Obtain first char</span>
</span><span class='line'>    <span class="kt">unichar</span> <span class="n">leftchar</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">combination</span> <span class="nl">characterAtIndex</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">combination</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">combination</span> <span class="nl">stringByReplacingOccurrencesOfString</span><span class="p">:</span><span class="s">@&quot; &quot;</span> <span class="nl">withString</span><span class="p">:</span><span class="s">@&quot;&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// Obtain rectangle ration</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">K</span> <span class="o">=</span> <span class="n">rect</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="n">rect</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// Obtain number of items</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">N</span> <span class="o">=</span> <span class="n">combination</span><span class="p">.</span><span class="n">length</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Obtain grid sizes</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">verItems</span> <span class="o">=</span> <span class="n">ceil</span><span class="p">(</span><span class="n">sqrtf</span><span class="p">(</span><span class="n">K</span><span class="o">*</span><span class="n">N</span><span class="p">));</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">horItems</span> <span class="o">=</span> <span class="n">ceil</span><span class="p">(</span><span class="n">sqrtf</span><span class="p">(</span><span class="n">N</span><span class="o">/</span><span class="n">K</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Items horizontally</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">gridHeigh</span> <span class="o">=</span> <span class="n">rect</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="n">verItems</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">gridWidth</span> <span class="o">=</span> <span class="n">rect</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="n">horItems</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Draw circles</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">color</span> <span class="n">setFill</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">color</span> <span class="n">setStroke</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">UIBezierPath</span> <span class="o">*</span><span class="n">bezPath</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">currentElement</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">y</span><span class="o">&lt;</span><span class="n">verItems</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span><span class="o">&lt;</span><span class="n">horItems</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">currentElement</span> <span class="o">=</span> <span class="p">(</span><span class="n">horItems</span><span class="o">*</span><span class="n">y</span><span class="p">)</span><span class="o">+</span><span class="n">x</span> <span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">currentElement</span> <span class="o">&gt;=</span> <span class="n">N</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">bezPath</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIBezierPath</span> <span class="nl">bezierPathWithOvalInRect</span><span class="p">:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="n">gridWidth</span><span class="p">,</span> <span class="n">y</span><span class="o">*</span><span class="n">gridHeigh</span><span class="p">,</span> <span class="n">gridWidth</span><span class="p">,</span> <span class="n">gridHeigh</span><span class="p">)];</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">([</span><span class="n">combination</span> <span class="nl">characterAtIndex</span><span class="p">:</span><span class="n">currentElement</span><span class="p">]</span> <span class="o">==</span> <span class="n">leftchar</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="p">[</span><span class="n">bezPath</span> <span class="n">fill</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="p">[</span><span class="n">bezPath</span> <span class="n">stroke</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the final implementation of the view, but usually it will grow with your development. Adding new features that you expect to find in your view. And more important, will protect you from changing what you expect to see if you make any change in your code in the future.</p>

<p>With that in mind, the tests become a lot more clear.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testIfNewResultHasOnlyOneSymbolByDefaultAreFirstSymbol</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">resultCell</span><span class="p">.</span><span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="n">generateRandomCharString</span><span class="p">];</span>
</span><span class='line'>    <span class="n">resultCell</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">arc4random_uniform</span><span class="p">(</span><span class="mi">300</span><span class="p">),</span> <span class="n">arc4random_uniform</span><span class="p">(</span><span class="mi">300</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">DummyView</span> <span class="o">*</span><span class="n">dummyV</span> <span class="o">=</span> <span class="p">[[</span><span class="n">DummyView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:</span><span class="n">resultCell</span><span class="p">.</span><span class="n">frame</span>
</span><span class='line'>                                             <span class="nl">combination</span><span class="p">:</span><span class="n">resultCell</span><span class="p">.</span><span class="n">result</span>
</span><span class='line'>                                                   <span class="nl">color</span><span class="p">:</span><span class="n">resultCell</span><span class="p">.</span><span class="n">color</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSData</span> <span class="o">*</span><span class="n">expectedImage</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">dataForCellPNGRepresentationForView</span><span class="p">:</span><span class="n">dummyV</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSData</span> <span class="o">*</span><span class="n">obtainedImage</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">dataForCellPNGRepresentationForView</span><span class="p">:</span><span class="n">resultCell</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">XCTAssertEqualObjects</span><span class="p">(</span><span class="n">expectedImage</span><span class="p">,</span> <span class="n">obtainedImage</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Create our view.</li>
<li>Create a dummy view with the same parameters.</li>
<li>Extract the representing images.</li>
<li>Check both match.</li>
</ol>


<p>Take a look at the rest of the test, I think they are pretty clear, but if you believe there is something you can&rsquo;t see, just send me an email or leave me a comment.</p>

<p>And with this post I finish with the TDD by now and we can start with the BDD.</p>

<p>Please, leave me comments, share and like if you can! See you in the next post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BDD - Mastermind : View Preparation to Make the UI Testable]]></title>
    <link href="http://guillemf.github.io/blog/2014/10/21/bdd-mastermind-view-preparation-to-make-the-ui-testable/"/>
    <updated>2014-10-21T17:43:42+02:00</updated>
    <id>http://guillemf.github.io/blog/2014/10/21/bdd-mastermind-view-preparation-to-make-the-ui-testable</id>
    <content type="html"><![CDATA[<p>This is the fourth post to create an application using BDD and TDD in iOS. If you missed the previous post, my recommendation is that you read it first <a href="http://guillemf.github.io/blog/2014/09/29/bdd-mastermind-tdd-in-the-model/" title="BDD - Mastermind : TDD in the Model">here</a>.</p>

<p>If you thought we were going to jump straight to BDD I&rsquo;m afraid you&rsquo;ll have to wait a little more. To understand it, first of all I&rsquo;m going to explain which is the framework I decided to use to BDD and how does it work. With all that info you&rsquo;ll understand why we need to prepare the things to be able to BDD.</p>

<p>You can find the code corresponding to this post in <a href="https://github.com/guillemf/Mastermind-BDD/tree/Step_5" title="MasterMind-BDD Step5">this commit</a>. Go and get it!</p>

<!-- more -->


<h1>Calabash</h1>

<h4>AUTOMATED ACCEPTANCE TESTING FOR MOBILE APPS</h4>

<p>If you go to <a href="http://calaba.sh" title="Automated Acceptance Testing for iOS and Android Apps">calabash web site</a> you&rsquo;ll find this definition.</p>

<blockquote><p>Calabash enables you to write and execute automated acceptance tests of mobile apps. Calabash is cross-platform, supporting Android and iOS native apps. It is open source and free, and has a company, Xamarin, backing and developing it.</p></blockquote>

<p>The reasons I decided to go with calabash after some investigation and research are diverse. First of all was the ease of integrating it in your projects. Opposite to other platforms it is just a question of a few sentences to be able to integrate it. Second, it works with <em>cucumber</em>. I really love cucumber as a way to interface with non technical people and be able to understand the same things and write acceptance criterias that we both understand and agree, and more important, we can convert them in tests.</p>

<p>When you are done with this post, never before ;), you can go to <a href="https://github.com/calabash/calabash-ios" title="calabash-ios github repository">github calabash iOS repository</a> and read how to install the gem and integrate it in your projects so you are able to follow the steps of this series of posts while you build your own, secure and testable app.</p>

<p>What&rsquo;s more important to understand in this post is that calabash works with the accessibility labels to inspect and perform tasks on the simulator and the device. That&rsquo;s the reason why we can&rsquo;t go straight to the tests when we are going to create an app that contains a bunch of custom views and we need to see if that view is red, blue, green or yellow for example. Sadly this is something we can&rsquo;t get out of the box by now. But the good news are that we can create a view that is testable in that way.</p>

<h2>Creating Testable Views - TDD to the rescue</h2>

<p>First thing we need to do is to convert what is a view perception into an accessible label. How are we going to do it? Keep reading and you&rsquo;ll know how.</p>

<p>As usual we&rsquo;ll start by creating a test file to test what I decided to call MMCell.</p>

<p>The strategy used to create a view that behaves as we want it to behave visually when we can&rsquo;t test that it really happens is to break it in to parts. One is tested with TDD and ensures that when setting properties on a view the visual changes happens as we expect. The other part is that those visual changes are expressed in a simple way in the accessibility label.</p>

<p>To do it we&rsquo;ll use two properties.</p>

<ul>
<li><strong>bezierPath</strong> : This is a <em>readonly</em> property that will reflect the shape that is going to be drawn in the view. This we can verify what is being drawn in the view.</li>
<li><strong>color</strong> : This is a property to allow the app set the color of the circle that&rsquo;s going to be shown in the view.</li>
</ul>


<p>To better understand how we are going to make it, let&rsquo;s take a look at the first test:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testWhenSizeChangesPathSizeChanges</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">width</span> <span class="o">=</span> <span class="n">arc4random_uniform</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">height</span> <span class="o">=</span> <span class="n">arc4random_uniform</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span><span class='line'>    <span class="n">cell</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">);</span>
</span><span class='line'>    <span class="bp">UIBezierPath</span> <span class="o">*</span><span class="n">expectedBezier</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIBezierPath</span> <span class="nl">bezierPathWithOvalInRect</span><span class="p">:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">XCTAssertTrue</span><span class="p">(</span><span class="n">CGPathEqualToPath</span><span class="p">([</span><span class="n">expectedBezier</span> <span class="bp">CGPath</span><span class="p">],</span> <span class="p">[</span><span class="n">cell</span><span class="p">.</span><span class="n">bezierPath</span> <span class="bp">CGPath</span><span class="p">]),</span>
</span><span class='line'>                  <span class="s">@&quot;Bezier Path does not match expected shape&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The test is very simple. We get a random height and a random width, both between 0 and 200, and check that when we set the frame of the view the path generated matches what we expect. This doesn&rsquo;t guarantees that this is what is going to be drawn. To do it we need to go one step forward.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testFillIsCalledOnBezierPathWhenDrawRectIsCalled</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">id</span> <span class="n">bezierMock</span> <span class="o">=</span> <span class="n">OCMPartialMock</span><span class="p">(</span><span class="n">cell</span><span class="p">.</span><span class="n">bezierPath</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">OCMStub</span><span class="p">([</span><span class="n">bezierMock</span> <span class="n">fill</span><span class="p">]).</span><span class="n">andForwardToRealObject</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">cell</span> <span class="nl">drawRect</span><span class="p">:</span><span class="n">cell</span><span class="p">.</span><span class="n">bounds</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">OCMVerify</span><span class="p">([</span><span class="n">bezierMock</span> <span class="n">fill</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This test what basically does is to check if, when drawRect is called also fill is called on bezierPath object. To do it I use one of the best friends you can have when TDDing, <strong>Mocks</strong>. Sadly this is something that is not natively implemented in XCTest, so we need to find third party developments to use it. There are different libraries that implement mocks for iOS. In this case I decided to choose <a href="http://ocmock.org/" title="OCMock Web Site">OCMock</a> which is a very well known and tested libraries, but <a href="https://github.com/jonreid/OCMockito" title="OCMockito GitHub Page">OCMockito</a> is also an excellent option.</p>

<p>Basically a mock is an object that &ldquo;replaces&rdquo; totally or partially the object you are trying to test or an object you want to behave in a certain way so you check what happens or make things happen in a controlled environment.</p>

<p>I know this sounds a little weird, so if you want me to write a full post about Mocking in iOS, please ask me for it in the comments or twitter and I&rsquo;ll prepare it.</p>

<p>This is a good moment to introduce another player that will join you projects very often.</p>

<h1>CocoaPods</h1>

<p>If you are already familiar with CocoaPods you can jump straight to <a href="#testinwhatitlookslike">Testing what it looks like</a>.</p>

<p>In <a href="http://cocoapods.org" title="CocoaPods Web Site">CocoaPods Web Site</a> they define themselves as</p>

<blockquote><p>CocoaPods is the dependency manager for Objective-C projects. It has thousands of libraries and can help you scale your projects elegantly.</p></blockquote>

<p>I would add to it that they do it in an <em>awesome and very clean way</em>.</p>

<p>Until I discovered CocoaPods I needed to include, organize and maintain third party developments manually. CocoaPods let&rsquo;s you do it all in a very clean and isolated way so you can start using the those libraries in less than five minutes.</p>

<p>Let&rsquo;s see how to do it in our case.</p>

<p>You have a very complete instruction set in <a href="http://cocoapods.org" title="CocoaPods Web Site">CocoaPods Web Site</a> but basically is three steps.</p>

<ol>
<li>Install the gem with <em>sudo gem install cocoapods</em>.</li>
<li>Create a file named &ldquo;<em>Podfile</em>&rdquo; in the same folder you have your .xcodeproj file and include the information you need in it.</li>
<li>Run <em>pod install</em> from the terminal in that folder.</li>
</ol>


<p>After those three simple steps you&rsquo;ll have a new .xcworkspace file with two projects in it, one your project and the other the project to build the pods library.</p>

<p>From this point you just need to include the pod header you need in each file you need it. In this case by now I just need to include <strong>&lt;OCMock/OCMock.h></strong> in the Test File.</p>

<p>The content of this first version of the Podfile is the following.</p>

<pre><code>source 'https://github.com/CocoaPods/Specs.git'

platform :ios, '8.0'

xcodeproj 'MasterMind'

target :MasterMindTests do
    pod 'OCMock', '~&gt; 3.1.1'
end
</code></pre>

<p>Note that I added the pod only to the Test target, that means this pod won&rsquo;t be available in release target, which is what we want.</p>

<h1>Testing what it looks like<a name="testinwhatitlookslike"></a></h1>

<p>We need to do the same we&rsquo;ve done with bezierPath with color so we ensure that &ldquo;<em>setFill</em>&rdquo; is called on color property when &ldquo;<em>drawRect</em>&rdquo; is called on the view.</p>

<p>This test will make it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testSetFillIsCalledOnColorWhenDrawRectIsCalled</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">id</span> <span class="n">colorMock</span> <span class="o">=</span> <span class="n">OCMPartialMock</span><span class="p">(</span><span class="n">cell</span><span class="p">.</span><span class="n">color</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">OCMStub</span><span class="p">([</span><span class="n">colorMock</span> <span class="n">setFill</span><span class="p">]).</span><span class="n">andForwardToRealObject</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">cell</span> <span class="nl">drawRect</span><span class="p">:</span><span class="n">cell</span><span class="p">.</span><span class="n">bounds</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">OCMVerify</span><span class="p">([</span><span class="n">colorMock</span> <span class="n">setFill</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point we know the properties are set, updated on changes, called SetNeedsDiplay to request redraw ( look at the code ) and we are sure that they are called when drawRect is called, but how can we ensure the last result is what we expect to be. There are many ways to do it so here is what I suggest in this case. Remember I&rsquo;m not trying to be exhaustive in this series but create an exercise to show you all the possibilities we have so far to test an app.</p>

<p>The best way to let the test see if the final result is what we want is compare it with an image that represents what we want, so that&rsquo;s what we are going to do. In this case I took some images that represents what the view should look like in different circumstances. Those are:</p>

<table>
    <tr>
        <td><img src = "https://farm6.staticflickr.com/5610/15597069961_c34ebc6b67_o.png"/></td>
        <td><img src = "https://farm6.staticflickr.com/5597/15413734867_80e3391e9f_o.png"/></td>
        <td><img src = "https://farm4.staticflickr.com/3953/15413114649_192d2a1f54_o.png"/></td>
        <td><img src = "https://farm4.staticflickr.com/3944/15413734757_cf408a786c_o.png"/></td>
    </tr>
</table>


<p>Now, how to check the view against the image? This is the test.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testViewMatchesExpectedImage</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cell</span><span class="p">.</span><span class="n">color</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">redColor</span><span class="p">];</span>
</span><span class='line'>    <span class="n">cell</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSString</span><span class="o">*</span> <span class="n">fileImageName</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSBundle</span> <span class="nl">bundleForClass</span><span class="p">:[</span><span class="nb">self</span> <span class="k">class</span><span class="p">]]</span> <span class="nl">pathForResource</span><span class="p">:</span><span class="s">&quot;testImageRed&quot;</span> <span class="nl">ofType</span><span class="p">:</span><span class="s">@&quot;png&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">UIImage</span> <span class="o">*</span><span class="n">fileImageObj</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIImage</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithContentsOfFile</span><span class="p">:</span><span class="n">fileImageName</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">UIImage</span> <span class="o">*</span><span class="n">expectedImage</span> <span class="o">=</span> <span class="n">UIImagePNGRepresentation</span><span class="p">(</span><span class="n">fileImageObj</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UIGraphicsBeginImageContext</span><span class="p">(</span><span class="n">cell</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="n">cell</span><span class="p">.</span><span class="n">layer</span> <span class="nl">renderInContext</span><span class="p">:</span><span class="n">UIGraphicsGetCurrentContext</span><span class="p">()];</span>
</span><span class='line'>    <span class="bp">UIImage</span><span class="o">*</span> <span class="n">image1</span> <span class="o">=</span> <span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">();</span>
</span><span class='line'>    <span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
</span><span class='line'>    <span class="bp">UIImage</span> <span class="o">*</span><span class="n">viewImage</span><span class="o">=</span>  <span class="n">UIImagePNGRepresentation</span><span class="p">(</span><span class="n">image1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">XCTAssertEqualObjects</span><span class="p">(</span><span class="n">viewImage</span><span class="p">,</span> <span class="n">expectedImage</span><span class="p">,</span> <span class="s">@&quot;View should look like the image&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The base is that we obtain the NSData representation of both images and we compare them, that will tell us if they match or doesn&rsquo;t.</p>

<p>And that&rsquo;s all for now. Now we have testable view cells. We need testable result cells and then we can start with BDD.</p>

<p>Remember you can find the code of this post in <a href="https://github.com/guillemf/Mastermind-BDD/tree/Step_5" title="MasterMind-BDD Step5">this commit</a>.</p>

<p>If you like it, please share! If you believe there is some part that needs more detail or want to suggest a new post like with Mocking, just send me your thoughts.</p>

<p>Thank you for reading me.</p>

<p>In the next post <a href="http://guillemf.github.io/blog/2014/11/10/bdd-mastermind-view-preparation/" title="BDD - Mastermind : View Preparation">BDD - Mastermind : View Preparation</a> we&rsquo;ll find a more robust and maintainable way to create tests for the visual aspect.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BDD - Mastermind : TDD in the Model]]></title>
    <link href="http://guillemf.github.io/blog/2014/09/29/bdd-mastermind-tdd-in-the-model/"/>
    <updated>2014-09-29T17:06:51+02:00</updated>
    <id>http://guillemf.github.io/blog/2014/09/29/bdd-mastermind-tdd-in-the-model</id>
    <content type="html"><![CDATA[<p>This is the third post to create an application using BDD and TDD in iOS. If you missed the previous post, my recommendation is that you read it first <a href="http://guillemf.github.io/blog/2014/08/20/bdd-from-the-idea-to-the-app-2/" title="BDD: From the Idea to the App 2">here</a>.</p>

<p>It&rsquo;s time to get your hands dirty. To make it really easy I&rsquo;ve decided to tag each relevant commit with step numbers so you can follow step by step the process. I recommend you to code your own version, but if at some point you are lost, just checkout the step where you got lost and we&rsquo;ll be synchronized again.</p>

<p>First thing to do is create your project and have it ready to run. You can create a new project or checkout <a href="https://github.com/guillemf/Mastermind-BDD/tree/Step_1" title="MasterMind-BDD Step1">this commit</a> or just checkout from terminal by :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone git@github.com:guillemf/Mastermind-BDD.git
</span><span class='line'>git tag -l
</span><span class='line'>git checkout tags/Step_1.
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>As you might now the process of TDD is basically writing a test, seeing how it fails, implement the solution and run again the test until it passes. I&rsquo;m not going to go deep in what is TDD as there are many webs that explain very well how to do TDD like <a href="http://qualitycoding.org">Quality Coding</a> specially the screencast series starting with <a href="http://qualitycoding.org/objective-c-tdd/">Intro to Objectve-C TDD</a>.</p>

<p>So, assuming you know what is TDD and how to do it, let&rsquo;s start our process.</p>

<p>What I do is take each requirement and try to dissect it in all the possible unitary tests I can do covering all possibilities. So let&rsquo;s start on the first one.</p>

<ul>
<li>Every time we start a new game, the model has to create a new secret combination.</li>
</ul>


<p>The first test to write is to be sure that right from the beginning there is something in combination. I write my first test and, following the method, I get my first error.</p>

<p><img src="https://farm3.staticflickr.com/2941/15217066667_a2f04c500c_o.png" title="Test 1 Fail" alt="First Failing Test" /></p>

<p>So I need to fix that situation, first by implementing MMModel class.</p>

<p>With this implementation</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">MMModel</span> : <span class="bp">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">combination</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">MMModel</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">combination</span> <span class="o">=</span> <span class="s">@&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The tests passes, things seem to go in the right way. Let&rsquo;s face the second test. As it says every time we <strong>start</strong> a new game, a <strong>new combination</strong>, the next test seems obvious that it has to be something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testModelOnStartShouldGenerateANewCombination</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">MMModel</span> <span class="o">*</span><span class="n">model</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MMModel</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">originalCombination</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">combination</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">model</span> <span class="n">start</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">XCTAssertNotEqual</span><span class="p">(</span><span class="n">originalCombination</span><span class="p">,</span> <span class="n">model</span><span class="p">.</span><span class="n">combination</span><span class="p">,</span> <span class="s">@&quot;After start the combination has to be different from the previous one&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But that only covers one iteration, and unit tests has to be <em>independent</em> on the contexts, that mean a random number of times, so let&rsquo;s introduce a random number to repeat starts.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testModelOnStartShouldGenerateANewCombination</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">MMModel</span> <span class="o">*</span><span class="n">model</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MMModel</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">lowerBound</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">upperBound</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">rndValue</span> <span class="o">=</span> <span class="n">lowerBound</span> <span class="o">+</span> <span class="n">arc4random</span><span class="p">()</span> <span class="o">%</span> <span class="p">(</span><span class="n">upperBound</span> <span class="o">-</span> <span class="n">lowerBound</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">n</span><span class="o">&lt;=</span><span class="n">rndValue</span><span class="p">;</span> <span class="n">n</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">NSString</span> <span class="o">*</span><span class="n">originalCombination</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">combination</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">model</span> <span class="n">start</span><span class="p">];</span>
</span><span class='line'>        <span class="n">XCTAssertNotEqual</span><span class="p">(</span><span class="n">originalCombination</span><span class="p">,</span> <span class="n">model</span><span class="p">.</span><span class="n">combination</span><span class="p">,</span> <span class="s">@&quot;After start the combination has to be different from the previous one&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And this implementation</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">start</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">combination</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;%d&quot;</span><span class="p">,</span> <span class="n">arc4random</span><span class="p">()];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Makes the test pass. Yes, you might think &ldquo;<em>Hey, that&rsquo;s a trick. This is not a valid combination!!</em>&rdquo; and you&rsquo;d be right, but don&rsquo;t forget TDD says &ldquo;<strong>Write the minimum amount of code that makes the test pass</strong>&rdquo;, and that&rsquo;s what we are doing. Later on we&rsquo;ll find that we need to change this implementation to pass other tests, but we&rsquo;ll be sure we are not breaking the rules with the following and more complex tests we need to pass.</p>

<p>It&rsquo;s time for some refactoring and we&rsquo;ll move the declaration of model to the setup method. As we need a new combination from the start, we&rsquo;ll also move a call to start in the model inside the creation. We run the tests by Cmd+U and see all still works.</p>

<p>Next requirement is :</p>

<ul>
<li>The secret combination is four numbers long.</li>
</ul>


<p>So the tests are :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testModelSecretCombinationShouldContainFourNumbers</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">XCTAssertEqual</span><span class="p">(</span><span class="n">model</span><span class="p">.</span><span class="n">combination</span><span class="p">.</span><span class="n">length</span><span class="p">,</span> <span class="mi">4ul</span><span class="p">,</span> <span class="s">@&quot;Secrect combination length should be four&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testModelSecretCombinationIsNumeric</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSCharacterSet</span><span class="o">*</span> <span class="n">nonNumbers</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSCharacterSet</span> <span class="n">decimalDigitCharacterSet</span><span class="p">]</span> <span class="n">invertedSet</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSRange</span> <span class="n">r</span> <span class="o">=</span> <span class="p">[</span><span class="n">model</span><span class="p">.</span><span class="n">combination</span> <span class="nl">rangeOfCharacterFromSet</span><span class="p">:</span> <span class="n">nonNumbers</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">XCTAssertEqual</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">location</span><span class="p">,</span> <span class="n">NSNotFound</span><span class="p">,</span> <span class="s">@&quot;All digits should be numeric&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here we have our first need of re-coding a part of the source to be able to pass those two tests. Try to do it by yourself and if you can&rsquo;t see how to do it, you can go and checkout <a href="https://github.com/guillemf/Mastermind-BDD/tree/Step_2" title="MasterMind-BDD Step2">this commit</a>.</p>

<p>With the next requirement, things start becoming complicated and won&rsquo;t be so easy in terms of coding.</p>

<ul>
<li>The numbers in the combination are between 1 and 4.</li>
</ul>


<p>Let&rsquo;s write the test to fail.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testModelSecretCombinationAllDigitsAreBetween1and4</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSCharacterSet</span><span class="o">*</span> <span class="n">non1234</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSCharacterSet</span> <span class="nl">characterSetWithCharactersInString</span><span class="p">:</span><span class="s">@&quot;1234&quot;</span><span class="p">]</span> <span class="n">invertedSet</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSRange</span> <span class="n">r</span> <span class="o">=</span> <span class="p">[</span><span class="n">model</span><span class="p">.</span><span class="n">combination</span> <span class="nl">rangeOfCharacterFromSet</span><span class="p">:</span> <span class="n">non1234</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">XCTAssertEqual</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">location</span><span class="p">,</span> <span class="n">NSNotFound</span><span class="p">,</span> <span class="s">@&quot;All digits should be between 1 and 4&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again all the challenge is inside <em>start</em> method in <em>MMModel.m</em>. It is a good practice to try to implement it by yourself. Once you are done, checkout <a href="https://github.com/guillemf/Mastermind-BDD/tree/Step_3" title="MasterMind-BDD Step3">Step 3</a> and you can compare your solution to mine and see how beautiful it is to see there are many ways to find a solution for the same problem. And remember to write <strong>the less possible code</strong> to pass the tests.</p>

<p>To not make this post eternal, I will just comment next requirement:</p>

<ul>
<li>The numbers in the combination can be repeated.</li>
</ul>


<p>In this case we can&rsquo;t write a test, at least in an easy way, about how to allow something. If opposite to this requirement it would be &ldquo;<em>The numbers in the combination can be repeated</em>&rdquo; it would be easy to traverse the digits and ensure there is no repetition, but as long as this is not a restriction, I won&rsquo;t write a test for it. As usual, you can have a different opinion and write a test to verify it, I encourage you to do it and paste a comment explaining why you took that decision.</p>

<p>You&rsquo;ll find the full code for this post in <a href="https://github.com/guillemf/Mastermind-BDD/tree/Step_4" title="MasterMind-BDD Step4">Step 4</a>.</p>

<p>In the next post <a href="http://guillemf.github.io/blog/2014/10/21/bdd-mastermind-view-preparation-to-make-the-ui-testable/" title="BDD - Mastermind : Preparation to make the UI Testable">BDD - Mastermind : Preparation to make the UI Testable</a> we&rsquo;ll start preparing the views to implement it with BDD.</p>

<p>If you like it, please share! And leave me a comment if you have some time, I&rsquo;d love to know this is helping someone ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BDD - Mastermind : Internal Design]]></title>
    <link href="http://guillemf.github.io/blog/2014/09/25/bdd-mastermind-internal-design/"/>
    <updated>2014-09-25T19:14:18+02:00</updated>
    <id>http://guillemf.github.io/blog/2014/09/25/bdd-mastermind-internal-design</id>
    <content type="html"><![CDATA[<p>This is the second post to create an application using BDD and TDD in iOS. If you missed the first post, my recommendation is that you read it first <a href="http://guillemf.github.io/blog/2014/08/20/bdd-from-the-idea-to-the-app-2/" title="BDD: From the Idea to the App 2">here</a>.</p>

<p>In this post we are going to walk through the process of designing how we are going to architecture it internally and start writing down the first specifications that later on will become tests. I decided to structure it the way a &ldquo;non technical&rdquo; person would describe what she wants and then move it to the world of Unit Testing and Acceptance Tests.</p>

<!-- more -->


<h2>First TDD</h2>

<p><img class="right" src="https://farm4.staticflickr.com/3896/15171494279_9dfcea90f6_n.jpg" width="320" height="297" title="MVC #1" >
Let&rsquo;s begin by revisiting the most important design pattern used in iOS Development, <em>Model - View - Controller</em>. The internal design we are going to implement follows the classic schema. The first decision to make here is where to put the logic. I&rsquo;ve seen many designs that include the logic in the controller and leave the model just as a mere repository. My understanding is that the controller should act as the &ldquo;where to take this&rdquo; and &ldquo;where to put that&rdquo;, not as the container of &ldquo;what happens when y put this&rdquo; or &ldquo;what should I obtain when I deliver this&rdquo;.</p>

<p>So, here is the first decision, the logic of the game will live in the model. Let&rsquo;s write some requirements the model has to follow.</p>

<ul>
<li>Every time we start a new game, the model has to create a new secret combination.</li>
<li>The secret combination is four numbers long.</li>
<li>The numbers in the combination are between 1 and 4.</li>
<li>The numbers in the combination can be repeated.</li>
<li>Every time we start a new game, the number of attempts has to be zero.</li>
<li>The maximum number of attempts is nine.</li>
<li>Only combinations of four numbers are accepted.</li>
<li>The combinations can contain duplicated numbers.</li>
<li>The numbers accepted in the combinations are between 1 and 4.</li>
<li>Every time a new combination is inserted a new result will be generated.</li>
<li>The result of a new combination inserted is a one letter &ldquo;A&rdquo; for each number that is in the secret combination in the right position and a letter &ldquo;B&rdquo; for each number that is in the combination but is not in the right position.</li>
<li>If the result is &ldquo;AAAA&rdquo; no new combination will be accepted.</li>
<li>If the number of attempts is nine and the last result is not &ldquo;AAAA&rdquo; no new combination will be accepted.</li>
<li>Its has to be possible to obtain the history of the game being played at any moment, providing the ordered sequence of pairs combination-result.</li>
</ul>


<p>These are the requirements to follow. As you can see I&rsquo;ve simplified the mastermind rules in order to make this exercise more understandable. We are not trying to create the final app but to understand what are we doing.</p>

<h2>Now BDD</h2>

<p>Now that we have the model specified, let&rsquo;s go for the behavior we want for the app. These requirements are written in natural language and then we&rsquo;ll rewrite later on in <a href="https://github.com/cucumber/cucumber/wiki/Gherkin" title="Gherkin Syntaxt Github">gherkin sintax</a>, which is the syntax used to describe the behavior that cucumber understands. As you will see, it is a very understandable syntax. Try to show the final result of the scenarios to a non technical person and see how easy she can understand and validate them, that&rsquo;s the great advantage I find in this, it&rsquo;s a bridge between devs and PO that both can understand and agree to a behavior with no interpretations and confusions.</p>

<p>Those could be the requirements. Note that we have to go to the very basic behavior to be sure nothing is left to no specification. If something is not explicitly defined, that means than nothing happens in that case.</p>

<ul>
<li>The screen should contain nine rows and five columns.</li>
<li>The left most column has to be gray.</li>
<li>The other five columns has to be white.</li>
<li>When I first open the app, a new game should be ready.</li>
<li>When a new game starts, the screen should contain no colors and no results.</li>
</ul>


<p>Up to this point we have initial conditions. Let&rsquo;s define the behavior to play.</p>

<ul>
<li>When I tap on a white cell a red circle should appear.</li>
<li>When I tap on a red circle cell, a yellow circle should appear.</li>
<li>When I tap on a yellow circle, a green circle should appear.</li>
<li>When I tap on a green circle, a blue circle should appear.</li>
<li>When I tap on a blue circle, a red circle should appear.</li>
<li>When I swipe my finger from left to right the combination should be validated.</li>
<li>When a combination has been validated, no tap on that row will react.</li>
<li>When a row has no validated combination above on tap on its cells should react.</li>
<li>When the number of validated combinations is zero the first row will behave as if there was a validated row above it.</li>
</ul>


<p>The third group of specifications will be the behavior of the results and the reset of the game.</p>

<ul>
<li>If a combination is not validated the left most cell of the row will show no content.</li>
<li>When a cell is validated the left most cell of the row will show the result of the combination.</li>
<li>For each color of the combination that is in the right position the result cell will show a black circle.</li>
<li>For each color of the combination that is not in the right position the result cell will show a white circle.</li>
<li>If there is a result cell showing four black colors the board shouldn&rsquo;t react to any gesture except for the game reset.</li>
<li>If I swipe the board from left to right the current game should finish and a new game should start.</li>
</ul>


<p>And this is all. We have created the specifications for all the rules and behaviors of the game. Of course we can define a lot more and be more exhaustive. But this is a good beginning.</p>

<p>In the next post <a href="http://guillemf.github.io/blog/2014/09/29/bdd-mastermind-tdd-in-the-model/" title="BDD - Mastermind : TDD in the Model">BDD - Mastermind : TDD in the Model</a> we&rsquo;ll start implementing using TDD for the Model.</p>

<p>If you like it, please share! And leave me a comment if you have some time, I&rsquo;d love to know this is helping someone ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BDD: From the Idea to the App 2]]></title>
    <link href="http://guillemf.github.io/blog/2014/08/20/bdd-from-the-idea-to-the-app-2/"/>
    <updated>2014-08-20T19:08:52+02:00</updated>
    <id>http://guillemf.github.io/blog/2014/08/20/bdd-from-the-idea-to-the-app-2</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been almost two years since I wrote my post from the idea to the App, and that&rsquo;s a long time. Since then many things changed and I&rsquo;ve been working a lot on BDD and TDD. So I guess this is a great moment to start a new series of posts about how to do the full process.</p>

<p>Last year I did a formation on iOS development. The final lessons consisted in creating a game, the Mastermind game. I think it is a good idea to use this example to build and app using TDD and BDD. Of course this process will not contain the full creation process with all details as it would take ages, even a book to do it, but I will include the headlines of the process with all the details and guides to complete the process, and of course with the code to do it.</p>

<p>Let&rsquo;s start with it.</p>

<!-- more -->


<h2>Introduction</h2>

<p><img class="left" src="http://upload.wikimedia.org/wikipedia/commons/2/2d/Mastermind.jpg" width="150" height="158" title="Mastermind" alt="Mastermind board"></p>

<p>We want to create the classic mastermind game. For those that doesn&rsquo;t know how top play Mastermind can take a look at <a href="http://en.wikipedia.org/wiki/Mastermind_(board_game)" title="Mastermind in Wikipedia">wikipedia</a> where the rules are very well explained.</p>

<p>In order to make this easier, let&rsquo;s simplify some rules. We&rsquo;ll make a fix number of games to play, let&rsquo;s say nine, the codemaker will always be the iPhone and finally, there will be no points distribution, if the codebreaker guesses the pattern of colors before ten games, wins, otherwise loses.</p>

<p>Of course those restrictions can be released in the future, but for now, let&rsquo;s do it this way.</p>

<h2>What do you need to start and App</h2>

<p><img class="right" src="https://farm6.staticflickr.com/5578/15101672880_79d001ba0f_o.jpg" width="190" height="490" title="Mastermind Sketch" alt="Mastermind board Sketch"></p>

<p>The first job to be done is far from the keyboard. We all want to start typing and working with the mac and seeing how it is starting to look like we expect to see it, but the truth is that <strong>The better you prepare it all, the best result you&rsquo;ll get</strong>.</p>

<p>So now let&rsquo;s put our <em>Product Owner</em> hat on and let&rsquo;s draw what we want. In this case, as we are going to create a game, we can start with the graphical part, because it will drive most of the subsequent user stories.</p>

<p>Drawn on paper it could look like something like this. I like to draw my first version with a pen or pencil so I can make easy and fast corrections as many times as I want. Once I am happy with the result, I will be able to proceed with more sophisticated tools or even ask a graphical designer to make a nice version of what I have on my mind to look as nicer as possible. But remember, one step at a time and don&rsquo;t try starting to build your house by the roof.</p>

<p>The sketch contains all the information we need. It has a place to put the combinations. It has a place to show the result of the try. And it has enough space to repeat each try until the user gas the combination or consumes all the opportunities.</p>

<p>Easy right? Well now you can say you have not only an idea but also what it should look like. Next step is start with the analysis of what we&rsquo;ve just drawn.</p>

<h2>First task, Analise what have we got to work with</h2>

<p><img class="left" src="https://farm3.staticflickr.com/2941/15101651020_46fb32d967_o.jpg" width="190" height="490" title="Mastermind Sketch With zones" alt="Mastermind board Sketch with zones"></p>

<p>First thing we can identify is that there are four different zones that we can identify.</p>

<p>1 - Left column is different from the rest. It will contain the results of the last combination we played.</p>

<p>2 - Four columns at the right of the first column. They will contain each of the combination we&rsquo;ve tried in chronological order.</p>

<p>3 - Cell content with a special control that contains the result of the combination composed by the four colors at its right.</p>

<p>4 - Row contents with four cells, each with a color representing a combination.</p>

<p>I know this analysis might seem too basic and simplistic, but believe me, simple analysis lead to simple and effective solutions and makes you not missing any part of your project. In fact engineering is that, dividing problems in smaller problems and those in more smaller until we are able to find a solution for each one and then reintegrate them in one big solution.</p>

<p>And that&rsquo;s all for this post. In the next post <a href="http://guillemf.github.io/blog/2014/09/25/bdd-mastermind-internal-design/" title="BDD - Mastermind : Internal Design">BDD - Mastermind : Internal Design</a> we&rsquo;ll start writing the requirements for the graphic part so we can be able to transform them into scenarios we can test in our continuous integration system.</p>

<p>Please, don&rsquo;t forget to share this post if you liked it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X Productivity Tips for Developers: Display Control]]></title>
    <link href="http://guillemf.github.io/blog/2014/08/20/mac-os-x-productivity-tips-for-developers-display-control/"/>
    <updated>2014-08-20T16:53:14+02:00</updated>
    <id>http://guillemf.github.io/blog/2014/08/20/mac-os-x-productivity-tips-for-developers-display-control</id>
    <content type="html"><![CDATA[<p>This is a small chapter about how to control the elements on the screen like windows organisation, windows switching and prevent from going to sleep. It&rsquo;s not the most interesting one but yet provides a bunch of tips that are good to know in the same line of the rest of the videos.</p>

<p>This post belongs to a series about <a href="http://shop.oreilly.com/product/110000007.do">Mac OS X Productivity Tips for Developers</a>. Next post will be Applescript Automation &amp; Automator Apps.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X Productivity Tips for Developers: Shell Tune-Ups]]></title>
    <link href="http://guillemf.github.io/blog/2014/08/19/mac-os-x-productivity-tips-for-developers-shell-tune-ups/"/>
    <updated>2014-08-19T17:11:59+02:00</updated>
    <id>http://guillemf.github.io/blog/2014/08/19/mac-os-x-productivity-tips-for-developers-shell-tune-ups</id>
    <content type="html"><![CDATA[<p>In this chapter we are introduced to z-shell, an amazing and full of possibilities shell to work with. I have to say that I&rsquo;ve been told in the past about this shell, but never had the oportunity to dive into it. The main reason to not try it was the poor information I founded. Here Tim and Mathew introduces you to &ldquo;Oh My Zsh&rdquo; which is an awesome and easy way to install, maintain and customize zsh.</p>

<p>During the chapter you become less and less scared about moving to this other shell and see all the benefits, from moving from one folder to another, themimgs the shell or listing the options a subcommand has.</p>

<p>Again we are in front of a master lesson by Tim Berglund and Mathew McCullogh.</p>

<p>This post belongs to a series about <a href="http://shop.oreilly.com/product/110000007.do">Mac OS X Productivity Tips for Developers</a>. Next post will be Display Control.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X Productivity Tips for Developers: Web Service Helpers]]></title>
    <link href="http://guillemf.github.io/blog/2014/07/14/mac-os-x-productivity-tips-for-developers-web-service-helpers/"/>
    <updated>2014-07-14T07:38:38+02:00</updated>
    <id>http://guillemf.github.io/blog/2014/07/14/mac-os-x-productivity-tips-for-developers-web-service-helpers</id>
    <content type="html"><![CDATA[<p>In this cruisade about keeping your hands far from the mouse and the trackpad, Matthew and Tim drives you into the world of the utilities to fetch and download information from the internet with commands. Here you can learn how to get information about the headers and bodys of the websites you need to work with from the terminal prompt. Also you can learn how to download and manipulate files or forward them and all at a few key presses from you, not the best one up to the moment but for sure one of the ones I&rsquo;m going to use more frequently.</p>

<h2>Pasteboard Command Line</h2>

<p>I decided to put this chapter together with the previous one because of its shortness. This is about how to use the clipboard from the command line as the title says. You never know how useful it can be until you realize the big amount of situations where it becomes a productivity improvement, not only to copy and paste data, but also to use commands and create gists with no mouse interaction.</p>

<p>This post belongs to a series about <a href="http://shop.oreilly.com/product/110000007.do">Mac OS X Productivity Tips for Developers</a>. Next post will be Shell Tune-Ups .</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X Productivity Tips for Developers: Saving to the Cloud]]></title>
    <link href="http://guillemf.github.io/blog/2014/07/14/mac-os-x-productivity-tips-for-developers-saving-to-the-cloud/"/>
    <updated>2014-07-14T07:03:54+02:00</updated>
    <id>http://guillemf.github.io/blog/2014/07/14/mac-os-x-productivity-tips-for-developers-saving-to-the-cloud</id>
    <content type="html"><![CDATA[<p>This time I was expecting to find something like &ldquo;how to use iCloud&rdquo; or a chapter based on how to use services like Dropbox or BOX, but instead of that, once again, surprise surprise, it&rsquo;s not about that. This is productivity tips for developers, so let&rsquo;s show you how to use the cloud in our benefit to store and share binaries, peaces of code or even social media content from the command line, all explained in a very nice way and providing all the information about where to find it, how to use it and where to get more info. I think I&rsquo;m going to start twitting in a very different way from now, without moving my hands out of the keyboard.</p>

<p>This post belongs to a series about <a href="http://shop.oreilly.com/product/110000007.do">Mac OS X Productivity Tips for Developers</a>. Next post will be about Web Service Helpers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X Productivity Tips for Developers: Viewing With Quicklook and Moving With Finder]]></title>
    <link href="http://guillemf.github.io/blog/2014/07/07/mac-os-x-productivity-tips-for-developers-viewing-with-quicklook-and-moving-with-finder/"/>
    <updated>2014-07-07T20:48:21+02:00</updated>
    <id>http://guillemf.github.io/blog/2014/07/07/mac-os-x-productivity-tips-for-developers-viewing-with-quicklook-and-moving-with-finder</id>
    <content type="html"><![CDATA[<p>This review is about to short chapters. First one is about what to do with quicklook. As usual Mathew and Tim takes it one step beyond showing you which are the &lsquo;mush have&rsquo; quicklook plugins and how to use them even without removing your hands from the keyboard.</p>

<p>The second one is about the finder. I&rsquo;ve complained many times about finder and all the functions I miss in it, but there is certainly a few tips you can use to make the job faster, easier and more effective. As usual they drive you through this topic in an easy and very understandable way.</p>

<p>This post belongs to a series about <a href="http://shop.oreilly.com/product/110000007.do">Mac OS X Productivity Tips for Developers</a>. Next post will be about Saving in the cloud.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X Productivity Tips for Developers: Searching With Spotlight]]></title>
    <link href="http://guillemf.github.io/blog/2014/07/06/mac-os-x-productivity-tips-for-developers-searching-with-spotlight/"/>
    <updated>2014-07-06T18:02:01+02:00</updated>
    <id>http://guillemf.github.io/blog/2014/07/06/mac-os-x-productivity-tips-for-developers-searching-with-spotlight</id>
    <content type="html"><![CDATA[<p>First of all I have to say that I am not a big fun of Spotlight. It looks to me nothing more that a textbox where to find items in the system, with an horrible and unusable list of results. To find and system items in a fast way I use launchbar, which I believe is a power and well designed tool.</p>

<p>Once again, Mathew and Tim showed me how wrong I was, explaining very well that behind Spotlight there is a lot more power using a sort of query language, that lets you filter by the existing, created and automated metadata that lives inside our system items, and how to take advantage of it to make it work in our favor without, once again, taking your hands out of the keyboard.</p>

<p>This post belongs to a series about <a href="http://shop.oreilly.com/product/110000007.do">Mac OS X Productivity Tips for Developers</a>. Next post will be about Viewing with Quicklook and Moving with Finder, two short chapters that I am going to review together.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X Productivity Tips for Developers: Package Management]]></title>
    <link href="http://guillemf.github.io/blog/2014/07/05/mac-os-x-productivity-tips-for-developers-package-management/"/>
    <updated>2014-07-05T16:37:08+02:00</updated>
    <id>http://guillemf.github.io/blog/2014/07/05/mac-os-x-productivity-tips-for-developers-package-management</id>
    <content type="html"><![CDATA[<p>Package Management is one of those thing you never pay attention to until the moment you really need them because you need that utility or that others and there is no other way to obtain them. I&rsquo;ve been using package managers since meany years but, to be fair, I never had a good reason to use one or another. In this chapter you get information about a couple package managers and also some tips on how to use them and why. It is all focused form the perspective of the terminal usage as it is the rule since now and in a very understandable and wasy to follow way, it is another pearl in the course.</p>

<p>This post belongs to a series about <a href="http://shop.oreilly.com/product/110000007.do">Mac OS X Productivity Tips for Developers</a>. Next post will be about Searching with Spotlight.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X Productivity Tips for Developers: File Formats]]></title>
    <link href="http://guillemf.github.io/blog/2014/07/04/mac-os-x-productivity-tips-for-developers-file-formats/"/>
    <updated>2014-07-04T09:41:31+02:00</updated>
    <id>http://guillemf.github.io/blog/2014/07/04/mac-os-x-productivity-tips-for-developers-file-formats</id>
    <content type="html"><![CDATA[<p>The title of this video does not give you a clue about what&rsquo;s inside. This chapter is all about mark up languages to write documents from README to complete books. To be fair I have never gone beyond Markdown and Multimarkdown, and in the past I had some problems when writing a book with those formats that lead me to choose visual editors that made me lose that plus in portability of the documents. Now, after seing the video, I&rsquo;d choose another option that would have change things a lot. Again, and in the same line of the other chapters, it&rsquo;s a great value video, don&rsquo;t lose it.</p>

<p>This post belongs to a series about <a href="http://shop.oreilly.com/product/110000007.do">Mac OS X Productivity Tips for Developers</a>. Next post will be about Package Management.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X Productivity Tips for Developers: Source Control Assistants]]></title>
    <link href="http://guillemf.github.io/blog/2014/07/04/mac-os-x-productivity-tips-for-developers-source-control-assistants/"/>
    <updated>2014-07-04T08:58:20+02:00</updated>
    <id>http://guillemf.github.io/blog/2014/07/04/mac-os-x-productivity-tips-for-developers-source-control-assistants</id>
    <content type="html"><![CDATA[<p>This video is about Git basically as they are great GIT professionals and have the videos I highly recommended in the previous posts, but opposite to what I was expecting to see, in this video they don&rsquo;t focus on visual Git clients but in terminal utilities to, again, focus on productivity. They go though a couple utilities I didn&rsquo;t even know that existed and show you those unvaluables tips focused to productivity. It is a great info if you work with Git and greater if you also use Github.</p>

<p>This post belongs to a series about <a href="http://shop.oreilly.com/product/110000007.do">Mac OS X Productivity Tips for Developers</a>. Next post will be about File Formats.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X Productivity Tips for Developers: Terminal Tips]]></title>
    <link href="http://guillemf.github.io/blog/2014/07/03/mac-os-x-productivity-tips-for-developers-terminal-tips/"/>
    <updated>2014-07-03T20:08:22+02:00</updated>
    <id>http://guillemf.github.io/blog/2014/07/03/mac-os-x-productivity-tips-for-developers-terminal-tips</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://upload.wikimedia.org/wikipedia/en/d/d7/ITerm2-icon.png" width="256" height="256" title="Mac OS X Productivity Tips for Developers" alt="Terminal Tips: iTerm2"></p>

<p>This chapter is focused on the terminal, that big unknown for many users, loved and hated in the same proportion, but needed at some point if you are or you are thinking about becoming a developer.</p>

<p>The chapter starts talking about iTerm2 and how to use it, set it up and customize to your preferences, but beyond that you get a series of tips to be able to improve your productivity and avoid errors that will save your butt in more than one situation.</p>

<p>At the end of the chapter the reveal a great &lsquo;utility&rsquo; for your terminal that will make you love this video just for it and you&rsquo;ll use for sure in your daily basis work, and not only that, they show you where to get more like them. Take a look at it, it&rsquo;s worth it.</p>

<p>This post belongs to a series about <a href="http://shop.oreilly.com/product/110000007.do">Mac OS X Productivity Tips for Developers</a>. Next post will be about Source Control Assistants.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[O'Reilly Media Videos]]></title>
    <link href="http://guillemf.github.io/blog/2014/07/02/oreilly-media-videos/"/>
    <updated>2014-07-02T08:24:40+02:00</updated>
    <id>http://guillemf.github.io/blog/2014/07/02/oreilly-media-videos</id>
    <content type="html"><![CDATA[<h2>Mac OS X Productivity Tips for Developers</h2>

<p><img class="left" src="https://farm4.staticflickr.com/3918/14552849031_7dbb387ef1_n.jpg" width="227" height="340" title="Mac OS X Productivity Tips for Developers" alt="Mac OS X Productivity Tips for Developers"></p>

<p>I am a big fan of O&#8217;Reilly Media products because of their quality and the real value added that I usually get as a professional. In the past I acquired some of the videos like <a href="http://shop.oreilly.com/product/0636920017462.do">Mastering Git</a> or <a href="http://shop.oreilly.com/product/0636920024774.do">Mastering Advanced Git</a> , which I highly recommend if you are a Git user, and I found they are impressive easy to follow, immediate to apply and in return you get a huge increase of you expertise and so a good competitive advantage.</p>

<p>Some time ago I discovered a new video from O&#8217;Reilly called <a href="http://shop.oreilly.com/product/110000007.do">Mac OS X Productivity Tips for Developers</a> and I almost immediately wanted to buy it and start getting all that included tips and tricks to use them in my daily tasks as developer.</p>

<p>I normally take advantage of the &ldquo;<em>Deal of the day</em>&rdquo; or &ldquo;<em>Deal of the week</em>&rdquo; at O&#8217;Reilly, and I though that this was going to be a good candidate to wait for. Today, I finally got the luck to be able to access to it thanks to O&#8217;Reilly, and I really believe that in return of their attitude it is fair to share my thoughts and opinions about this video that might encourage some of you to buy it.</p>

<p>To do that my compromise is to post an opinion about each of the chapters or group of chapters you can find in the video, this first post is about first chapter.</p>

<h2>Keyboard Hacks</h2>

<p>This first video has been like opening a window and letting some fresh air come in. As you might know I am iOS Developer. I spend most of my day in front of my computer pressing the keys and looking at the monitor all time. Some time ago I had a tendinitis in my right hand I my doctor said it was because of an excessive use of the mouse. After that I bought a trackpad to try to alternate and so reduce the pain and the risk of another injury.</p>

<p>In this video you&rsquo;ll find some tricks to keep your fingers on the keyboard to do those kind of tasks you repeat hundreds of times every day and makes you use the mouse/trackpad with the subsequent lose of time and risk of stressing your wrist too much and end having a tendinitis.</p>

<p>I really believe this is a good bunch of tips and tricks to incorporate to your daily routine. Let&rsquo;s see what more has it inside to help me.</p>
]]></content>
  </entry>
  
</feed>
